package com.metiz.pelconnect;import android.annotation.SuppressLint;import android.app.Dialog;import android.app.DownloadManager;import android.app.ProgressDialog;import android.app.TimePickerDialog;import android.content.BroadcastReceiver;import android.content.ContentResolver;import android.content.ContentUris;import android.content.ContentValues;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.res.ColorStateList;import android.database.Cursor;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.media.MediaScannerConnection;import android.net.ConnectivityManager;import android.net.Uri;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.provider.DocumentsContract;import android.provider.MediaStore;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.Spinner;import android.widget.TextView;import android.widget.TimePicker;import androidx.annotation.NonNull;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.widget.SearchView;import androidx.appcompat.widget.Toolbar;import androidx.core.content.FileProvider;import androidx.databinding.DataBindingUtil;import androidx.documentfile.provider.DocumentFile;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentManager;import androidx.fragment.app.FragmentTransaction;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.google.android.material.bottomnavigation.BottomNavigationView;import com.google.android.material.floatingactionbutton.FloatingActionButton;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.google.zxing.integration.android.IntentIntegrator;import com.google.zxing.integration.android.IntentResult;import com.kaopiz.kprogresshud.KProgressHUD;import com.metiz.pelconnect.Adapter.EmergencyAdapter;import com.metiz.pelconnect.Adapter.HolidayAdapter;import com.metiz.pelconnect.Adapter.PatientAdapter;import com.metiz.pelconnect.Adapter.SearchableDrugAdapter;import com.metiz.pelconnect.Adapter.SearchablePatientAdapter;import com.metiz.pelconnect.activity.PDFViewActivity;import com.metiz.pelconnect.activity.SettingAppActivity;import com.metiz.pelconnect.databinding.DialogShowDownloadFileAlertBinding;import com.metiz.pelconnect.fragment.DrugHistoryFragment;import com.metiz.pelconnect.fragment.InventoryFragment;import com.metiz.pelconnect.fragment.OrderHistoryNewFragment;import com.metiz.pelconnect.fragment.PatientNewFragment;import com.metiz.pelconnect.model.Delivery;import com.metiz.pelconnect.model.DownloadStatusModel;import com.metiz.pelconnect.model.DownloadSuccessRequestModel;import com.metiz.pelconnect.model.EmergencyMessage;import com.metiz.pelconnect.model.Facility;import com.metiz.pelconnect.model.HolidayMaster;import com.metiz.pelconnect.model.MedSheetDownloadReportModel;import com.metiz.pelconnect.model.MedsheetUrlModel;import com.metiz.pelconnect.model.Order;import com.metiz.pelconnect.model.PatientPOJO;import com.metiz.pelconnect.model.PrescriptionData;import com.metiz.pelconnect.network.API;import com.metiz.pelconnect.network.NetworkUtility;import com.metiz.pelconnect.network.VolleyCallBack;import com.metiz.pelconnect.retrofit.ApiClient;import com.metiz.pelconnect.retrofit.ApiInterface;import com.metiz.pelconnect.util.Constants;import com.metiz.pelconnect.util.GlobalArea;import com.metiz.pelconnect.util.MyReceiver;import com.metiz.pelconnect.util.NotificationListActivity;import com.metiz.pelconnect.util.PreferenceHelper;import com.metiz.pelconnect.util.RangeTimePickerDialog;import com.metiz.pelconnect.util.Utils;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.OutputStream;import java.lang.reflect.Type;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.Locale;import java.util.Objects;import butterknife.BindView;import butterknife.ButterKnife;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class PatientListActivityNew extends BaseActivity {    public static int clickPosition = 3;    @BindView(R.id.img_notification1)    ImageView imgNotification1;    @BindView(R.id.img_setting)    ImageView imgSetting;    FloatingActionButton fab;    Toolbar toolbar;    ProgressDialog progressDialog;    Spinner spinner_facility;    ImageView imgLogout, imgChange, imgNotification, imgBanner;    RelativeLayout relativeLayout;    LinearLayout ll_banner;    private Dialog dialogSHowAlert;    private DialogShowDownloadFileAlertBinding mDialogShowAlertBinding;    Dialog dialog;    Dialog dialogBanner;    Dialog dialogChangeFacility;    ImageView img_promotional_item;    List<PatientPOJO> patientList = new ArrayList<>();    List<MedSheetDownloadReportModel.DataBean> modelList;    List<DownloadSuccessRequestModel> downloadSuccessRequestModelsList = new ArrayList<>();    int count = 0;    int finalCount = 0;    long downloadID;    BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            updateNotificationIcon();        }    };    String versionRelease = Build.VERSION.RELEASE;    String Device_id = "35" + //we make this look like a valid IMEI            Build.BOARD.length() % 10 + Build.BRAND.length() % 10 +            Build.CPU_ABI.length() % 10 + Build.DEVICE.length() % 10 +            Build.DISPLAY.length() % 10 + Build.HOST.length() % 10 +            Build.ID.length() % 10 + Build.MANUFACTURER.length() % 10 +            Build.MODEL.length() % 10 + Build.PRODUCT.length() % 10 +            Build.TAGS.length() % 10 + Build.TYPE.length() % 10 +            Build.USER.length() % 10; //13 digits    ApiInterface apiService;    boolean isFromPatientList = true;    int SELECT_TREE_FOLDER  = 100;    Uri documentTreeUri = null;    boolean isFacility = false;    BroadcastReceiver onComplete = new BroadcastReceiver() {        @SuppressLint("LongLogTag")        public void onReceive(Context ctxt, Intent intent) {            PreferenceHelper.putString("LOGOUT","false");            if (intent.getAction().equals(DownloadManager.ACTION_DOWNLOAD_COMPLETE)) {                long id = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1);                Log.e("id:", "onReceive: " + id);                //Checking if the received broadcast is for our enqueued download by matching download id                if (downloadID == id) {                    Log.e("TAG", "onReceivecount: " + count);                    Log.e("TAG", "onReceivecount11: " + finalCount);                    downloadSuccessRequestModelsList.add(new DownloadSuccessRequestModel(modelList.get(count).getMedsheetID(), Integer.parseInt(MyApplication.getPrefranceData("UserID")), modelList.get(count).getExternal_Facility_Id(), modelList.get(count).getExternal_Patient_Id(), new SimpleDateFormat("MM/dd/yyyy hh:mm:ss", Locale.getDefault()).format(new Date()), 1, Device_id));                    Log.e("downloadID:", "onReceive: " + modelList.get(count).getMedsheetID());                    if (count < finalCount) {                        try {                            UpdatePatientMedSheetDownloadStatus(modelList.get(count).getMedsheetID(), Integer.parseInt(MyApplication.getPrefranceData("UserID")), modelList.get(count).getExternal_Facility_Id(), modelList.get(count).getExternal_Patient_Id(), Device_id,1 );//                            UpdatePatientMedSheetDownloadStatus(modelList.get(count).getMedsheetID(), Integer.parseInt(MyApplication.getPrefranceData("UserID")), modelList.get(count).getExternal_Facility_Id(), modelList.get(count).getExternal_Patient_Id(), 1, Device_id);                            count += 1;                            downloadTask();                        } catch (Exception e) {                            e.printStackTrace();                        }                    } else if (count == finalCount) {                        try {                            UpdatePatientMedSheetDownloadStatus(modelList.get(count).getMedsheetID(), Integer.parseInt(MyApplication.getPrefranceData("UserID")), modelList.get(count).getExternal_Facility_Id(), modelList.get(count).getExternal_Patient_Id(),  Device_id,1);                            count = 0;                            PreferenceHelper.putString("LOGOUT","true");                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                }               /* if (downloadID == id) {                    downloadSuccessRequestModelsList.add(new DownloadSuccessRequestModel(modelList.get(count).getMedsheetID(), Integer.parseInt(MyApplication.getPrefranceData("UserID")), modelList.get(count).getExternal_Facility_Id(), modelList.get(count).getExternal_Patient_Id(), new SimpleDateFormat("MM/dd/yyyy hh:mm:ss", Locale.getDefault()).format(new Date()), 1, Device_id));                    Log.e("downloadID:", "onReceive: " + modelList.get(count).getMedsheetID());                    count += 1;                    if (count < finalCount) {                        try {                            downloadTask();                        } catch (Exception e) {                            e.printStackTrace();                        }                    } else {                        Log.e("downloadSuccessRequestModelsList:", "onReceive: " + downloadSuccessRequestModelsList.size());                        UpdatePatientMedSheetDownloadStatus();//                        count = 0;                    }                }*/            }            // your code        }    };    public static String parseDateOrder(Date date) {        String outputPattern = "dd-MM-yyyy HH:mm:ss";        SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern, Locale.ENGLISH);        String str = null;        str = outputFormat.format(date);        return str;    }    private String getDateTime() {        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");        Date date = new Date();        return dateFormat.format(date);    }    private KProgressHUD hud;    private TextView toolbar_facility_name;    private SearchView search;    private EditText edt_rx_number, edt_qty;    private AutoCompleteTextView edt_drug;    private Spinner spinner_delivery, spinner_order;    private List<Delivery> deliverylist = new ArrayList<>();    private List<Order> orderlist = new ArrayList<>();    private BroadcastReceiver MyReceiver = null;    private AsyncTask<String, Void, Void> mTask;    private List<PrescriptionData> prescriptionList;    private List<Facility> facilityList;    private int SCANNED_BARCODE_ID = 0;    private RecyclerView patientListView;    private PatientAdapter patientAdapter;    private HolidayAdapter holidayAdapter;    private EmergencyAdapter emergencyAdapter;    private RecyclerView.LayoutManager layoutManager;    private PatientPOJO patient = new PatientPOJO();    //  public static int clickPosition = 0;    /*    SwipeRefreshLayout swipeRefreshLayout;    EditText edt_date;    EditText edt_first_name;    EditText edt_last_name;    EditText edt_start_care_date;    EditText edt_client_dob;    EditText edt_mr;    EditText edt_allergies;    EditText edt_hospice_diagnosis;    EditText edt_client_address1;    EditText edt_client_address2;    EditText edt_client_city;    EditText edt_zip;    EditText edt_md_name;    EditText edt_md_phone;    //add Pharam Client value    EditText edt_client_phone;    CheckBox cb_med_sheet_attached;    CheckBox cb_med_sheet_follow;    Button btn_dialog_cancel;    RadioButton rbMale, rbFemale;    RadioGroup rbGender;    Button btn_dialog_add;*/    private String base64 = null;    private BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener            = new BottomNavigationView.OnNavigationItemSelectedListener() {        @Override        public boolean onNavigationItemSelected(@NonNull MenuItem item) {            Fragment fragment;            switch (item.getItemId()) {                case R.id.navigation_home:                    getSupportActionBar().setTitle("");                    clickPosition = 0;                    replaceFragment(new PatientNewFragment(MyApplication.getPrefranceDataInt("facility")));                    return true;                case R.id.navigation_add_order:                    getSupportActionBar().setTitle("Order History");                    clickPosition = 1;                    replaceFragment(new OrderHistoryNewFragment(isFromPatientList, isFacility, MyApplication.getPrefranceDataInt("facility")));                    return true;                case R.id.navigation_cycle:                    getSupportActionBar().setTitle("Message");                    clickPosition = 2;                    replaceFragment(new CycleActivity(MyApplication.getPrefranceDataInt("facility")));                    return true;                case R.id.navigation_medpass:                    Log.e("TAG", "onNavigationItemSelected: " + "facility CLicked");                    getSupportActionBar().setTitle("Setting");                    clickPosition = 3;                    replaceFragment(new MedPassPatientListActivity(MyApplication.getPrefranceDataInt("facility")));                    return true;                case R.id.navigation_more:                    clickPosition = 4;                    getSupportActionBar().setTitle("Inventory");                    replaceFragment(new InventoryFragment(MyApplication.getPrefranceDataInt("facility")));                    return true;            }            return false;        }    };    @SuppressLint("ResourceType")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_patient_list);        ButterKnife.bind(this);        initView();        registerReceiver(onComplete, new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));        apiService =                ApiClient.getClient().create(ApiInterface.class);        MyReceiver = new MyReceiver();        BottomNavigationView navigation = (BottomNavigationView) findViewById(R.id.navigation);        navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);        initProgress();        getBannerList();        blink();        GetAllPatientMedSheetReport();        setSupportActionBar(toolbar);        getSupportActionBar().setTitle("");        if (getIntent().getExtras().containsKey("isFromLogin") && getIntent().getExtras().getBoolean("isFromLogin")) {            Log.e("Step", "==============2");            changeFacilityDialog(true);        }        getSupportActionBar().setTitle("Setting");        navigation.getMenu().getItem(3).setChecked(true);        setNavMenuItemThemeColors(getResources().getColor(R.color.colorPrimary), navigation);        clickPosition = 3;        replaceFragment(new MedPassPatientListActivity(MyApplication.getPrefranceDataInt("facility")));        /*    try {            if (Application.getPrefranceData("IsConfirm").equalsIgnoreCase("false")) {                openDialog(true);                Log.e("Step", "==============1");            } else if (getIntent().getExtras().containsKey("isFromLogin") && getIntent().getExtras().getBoolean("isFromLogin")) {                Log.e("Step", "==============2");                changeFacilityDialog(true);            } else if (getIntent().getExtras().getBoolean("isFromSpash")) {                if (Application.getPrefranceDataInt("facility") != 0) {                    replaceFragment(new PatientNewFragment(Application.getPrefranceDataInt("facility")));                }                Log.e("Step", "==============3");                List<Facility> list = Application.getGson().fromJson(Application.getPrefranceData("Facility"), new TypeToken<List<Facility>>() {                }.getType());                if (list != null && list.size() == 1) {                    imgChange.setVisibility(View.GONE);                    toolbar_facility_name.setText(list.get(0).getFacilityName());                    GlobalArea.selectedFacility = list.get(0).getFacilityName();                } else {                    toolbar_facility_name.setText(list.get(Application.getPrefranceDataInt("facility_selected_index")).getFacilityName());                    GlobalArea.selectedFacility = toolbar_facility_name.getText().toString();                }                // getPatientList(Application.getPrefranceDataInt("facility"));            }        } catch (Exception ex) {            ex.printStackTrace();        }*/        relativeLayout.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent starter = new Intent(PatientListActivityNew.this, NotificationListActivity.class);                startActivity(starter);            }        });        ll_banner.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent starter = new Intent(PatientListActivityNew.this, BannerTabActivity.class);                startActivity(starter);            }        });        imgChange.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                changeFacilityDialog(false);            }        });        imgSetting.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent starter = new Intent(PatientListActivityNew.this, SettingAppActivity.class);                startActivity(starter);            }        });        MyApplication.setPreferencesBoolean(Constants.PasswordChangeNotified, false);        boolean isMedPass = getIntent().getBooleanExtra("medPass", false);        Log.e("TAG", "onCreate: isMedPass" + isMedPass);       /* if(isMedPass){            getSupportActionBar().setTitle("Setting");            navigation.getMenu().getItem(3).setChecked(true);            setNavMenuItemThemeColors( getResources().getColor(R.color.colorPrimary),navigation);            clickPosition = 3;            replaceFragment(new MedPassPatientListActivity(Application.getPrefranceDataInt("facility")));        }*/    }    private void broadcastIntent() {        registerReceiver(MyReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));    }    public void setNavMenuItemThemeColors(int color, BottomNavigationView navigation) {        //Setting default colors for menu item Text and Icon        int navDefaultTextColor = Color.parseColor("#999999");        int navDefaultIconColor = Color.parseColor("#999999");        //Defining ColorStateList for menu item Text        ColorStateList navMenuTextList = new ColorStateList(                new int[][]{                        new int[]{android.R.attr.state_checked},                        new int[]{android.R.attr.state_enabled},                        new int[]{android.R.attr.state_pressed},                        new int[]{android.R.attr.state_focused},                        new int[]{android.R.attr.state_pressed}                },                new int[]{                        color,                        navDefaultTextColor,                        navDefaultTextColor,                        navDefaultTextColor,                        navDefaultTextColor                }        );        //Defining ColorStateList for menu item Icon        ColorStateList navMenuIconList = new ColorStateList(                new int[][]{                        new int[]{android.R.attr.state_checked},                        new int[]{android.R.attr.state_enabled},                        new int[]{android.R.attr.state_pressed},                        new int[]{android.R.attr.state_focused},                        new int[]{android.R.attr.state_pressed}                },                new int[]{                        color,                        navDefaultIconColor,                        navDefaultIconColor,                        navDefaultIconColor,                        navDefaultIconColor                }        );        navigation.setItemTextColor(navMenuTextList);        navigation.setItemIconTintList(navMenuIconList);    }    @Override    public void onBackPressed() {        BottomNavigationView mBottomNavigationView = findViewById(R.id.navigation);        if (mBottomNavigationView.getSelectedItemId() == R.id.navigation_home) {            super.onBackPressed();            finish();        } else {            mBottomNavigationView.setSelectedItemId(R.id.navigation_home);        }    }    public void replaceFragment(Fragment fr) {        Log.e("TAG", "replaceFragment: " + true);        FragmentManager fm = getSupportFragmentManager();        FragmentTransaction fragmentTransaction = fm.beginTransaction();        fragmentTransaction.replace(R.id.container_home, fr);        fragmentTransaction.commit();    }    public void getBannerList() {        //  RequestBody body = RequestBody.create(MediaType.parse("application/json"), (new JsonObject()).toString());        //  progressDialog.show();        NetworkUtility.makeJSONObjectRequest(API.Banner, new JSONObject(), API.Banner, new VolleyCallBack() {            @Override            public void onSuccess(JSONObject result) {                Log.e("onSuccess====>", result.toString());                try {                    //     progressDialog.dismiss();                    if (result != null) {                        holidayMasterList = MyApplication.getGson().fromJson(result.getJSONObject("Data").getJSONArray("HolidayMaster").toString(), new TypeToken<List<HolidayMaster>>() {                        }.getType());                        Log.e("holidayMasterList====>", holidayMasterList.toString());                        Log.e("EmergencyMasterList==>", emergencyMessageList.toString());                        emergencyMessageList = MyApplication.getGson().fromJson(result.getJSONObject("Data").getJSONArray("EmergencyMessage").toString(), new TypeToken<List<EmergencyMessage>>() {                        }.getType());                        if (holidayMasterList.size() == 0 && emergencyMessageList.size() == 0) {                            ll_banner.setVisibility(View.GONE);                        } else {                            dialogBanner();                            ll_banner.setVisibility(View.VISIBLE);                        }                    }                } catch (Exception ex) {                    //    progressDialog.dismiss();                    Log.e("exception====>", ex.getMessage());                    ex.printStackTrace();                }            }            @Override            public void onError(JSONObject result) {                Log.e("result====>", result.toString());                //progressDialog.dismiss();            }        });    }    private void initView() {        toolbar = (Toolbar) findViewById(R.id.toolbar);        toolbar_facility_name = (TextView) toolbar.findViewById(R.id.toolbar_sub_title);        ll_banner = (LinearLayout) findViewById(R.id.ll_banner);        fab = (FloatingActionButton) findViewById(R.id.fab);        relativeLayout = (RelativeLayout) findViewById(R.id.rl_notification);        search = (SearchView) findViewById(R.id.search);        imgNotification = (ImageView) findViewById(R.id.img_notification);        imgBanner = (ImageView) findViewById((R.id.img_banner));//      imgNotification.setVisibility(View.VISIBLE);        imgChange = (ImageView) findViewById(R.id.img_change);        imgChange.setVisibility(View.VISIBLE);        imgLogout = (ImageView) findViewById(R.id.img_logout);        imgLogout.setVisibility(View.GONE);        hud = KProgressHUD.create(Objects.requireNonNull(this))                .setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)                .setLabel("Please wait...")                .setCancellable(false);    }    private void updateNotificationIcon() {        if (MyApplication.getPrefranceDataInt("NotificationCount") != 0) {            imgNotification.setVisibility(View.VISIBLE);            imgNotification1.setVisibility(View.GONE);        } else {            imgNotification1.setVisibility(View.VISIBLE);            imgNotification.setVisibility(View.GONE);        }    }    private void initProgress() {        progressDialog = new ProgressDialog(this);        progressDialog.setMessage("Please wait...");        progressDialog.setCancelable(false);    }    private void fillFacilitySpinner() {        try {            Type listType = new TypeToken<List<Facility>>() {            }.getType();            facilityList = MyApplication.getGson().fromJson(MyApplication.getPrefranceData("Facility"), listType);            ArrayAdapter<Facility> dataAdapter = new ArrayAdapter<Facility>(this,                    R.layout.simple_spinner_item, facilityList);            dataAdapter.setDropDownViewResource(R.layout.simple_spinner_item);            spinner_facility.setAdapter(dataAdapter);            if (MyApplication.getPrefranceDataInt("facility") != 0) {                spinner_facility.setSelection(MyApplication.getPrefranceDataInt("facility_selected_index"));            }        } catch (Exception e) {            e.printStackTrace();        }    }    private void openAddOrderDialog(final PatientPOJO patientPojo) {        dialog = new Dialog(PatientListActivityNew.this);        //    dialog.setCancelable(false);        //    dialog.setCanceledOnTouchOutside(false);        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        dialog.setContentView(R.layout.dialog_add_order_new);        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();        Window window = dialog.getWindow();        lp.copyFrom(window.getAttributes());//This makes the dialog take up the full width        lp.width = WindowManager.LayoutParams.MATCH_PARENT;        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;        window.setAttributes(lp);        Button add = (Button) dialog.findViewById(R.id.btn_dialog_add);        Button cancel = (Button) dialog.findViewById(R.id.btn_dialog_cancel);        TextView delivery_time = (TextView) dialog.findViewById(R.id.delivery_time);        edt_qty = (EditText) dialog.findViewById(R.id.edt_qty1);        delivery_time.setText(Utils.getFormatedDate(new Date(), "hh:mm aa"));        ImageView img_barcode_drug = (ImageView) dialog.findViewById(R.id.img_barcode_drug);        ImageView img_barcode_rx = (ImageView) dialog.findViewById(R.id.img_barcode_rx);        LinearLayout ll_img = (LinearLayout) dialog.findViewById(R.id.ll_img);        img_promotional_item = (ImageView) dialog.findViewById(R.id.img_promotional_item);        imgLogout.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        switch (which) {                            case DialogInterface.BUTTON_POSITIVE:                                LogoutAPICall();                                break;                            case DialogInterface.BUTTON_NEGATIVE://No button clicked                                break;                        }                    }                };                AlertDialog.Builder builder = new AlertDialog.Builder(PatientListActivityNew.this);                builder.setMessage("Are you sure, you want to logout?").setPositiveButton("Yes", dialogClickListener)                        .setNegativeButton("No", dialogClickListener).show();            }        });        /*User Permission*/        ll_img.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                dialogForImageAddOrder();            }        });        edt_rx_number = (EditText) dialog.findViewById(R.id.edt_rx_number);        img_barcode_drug.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                SCANNED_BARCODE_ID = 1;                setBarcode("scan drug");            }        });        img_barcode_rx.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                SCANNED_BARCODE_ID = 0;                setBarcode("scan Rx Number");            }        });        edt_drug = (AutoCompleteTextView) dialog.findViewById(R.id.edt_drug);        delivery_time.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Calendar mCalendar = Calendar.getInstance();                int hour = mCalendar.get(Calendar.HOUR_OF_DAY) + 4;                int minute = mCalendar.get(Calendar.MINUTE);                RangeTimePickerDialog mTimePicker;                mTimePicker = new RangeTimePickerDialog(PatientListActivityNew.this, new TimePickerDialog.OnTimeSetListener() {                    @Override                    public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {                        int hour = selectedHour;                        int minutes = selectedMinute;                        String timeSet = "";                        if (hour > 12) {                            hour -= 12;                            timeSet = "PM";                        } else if (hour == 0) {                            hour += 12;                            timeSet = "AM";                        } else if (hour == 12) {                            timeSet = "PM";                        } else {                            timeSet = "AM";                        }                        String min = "";                        if (minutes < 10)                            min = "0" + minutes;                        else                            min = String.valueOf(minutes);                        // Append in a StringBuilder                        String aTime = new StringBuilder().append(hour).append(':')                                .append(min).append(" ").append(timeSet).toString();                        delivery_time.setText(aTime);                    }                }, hour, minute, true);//Yes 24 hour time                mTimePicker.setTitle("Select Time");//                mTimePicker.setMin(hour, minute);                mTimePicker.show();            }        });        final TextView txt_dialog_facility = (TextView) dialog.findViewById(R.id.txt_dialog_facility);//        if (imgChange.getVisibility() == View.VISIBLE) {//            txt_dialog_facility.setText(facilityList.get(Application.getPrefranceDataInt("facility_selected_index")).getFacilityName());//        }        // txt_dialog_facility.setText(toolbar_facility_name.getText().toString());        spinner_delivery = (Spinner) dialog.findViewById(R.id.spinner_delivery);        spinner_order = (Spinner) dialog.findViewById(R.id.spinner_order);        final EditText edt_notes = (EditText) dialog.findViewById(R.id.edt_notes);        ArrayAdapter<Order> orderAdapter = new ArrayAdapter<Order>(this,                R.layout.simple_spinner_item, orderlist);        orderAdapter.setDropDownViewResource(R.layout.simple_spinner_item);        spinner_order.setAdapter(orderAdapter);        ArrayAdapter<Delivery> dataAdapter = new ArrayAdapter<Delivery>(this,                R.layout.simple_spinner_item, deliverylist);        dataAdapter.setDropDownViewResource(R.layout.simple_spinner_item);        spinner_delivery.setAdapter(dataAdapter);        final AutoCompleteTextView auto_patient = (AutoCompleteTextView) dialog.findViewById(R.id.auto_patient);        SearchablePatientAdapter adapter = new SearchablePatientAdapter(PatientListActivityNew.this, R.layout.simple_spinner_item, patientList);        auto_patient.setAdapter(adapter);        auto_patient.setThreshold(1);        auto_patient.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {                auto_patient.setEnabled(false);                auto_patient.setText(patientList.get(patientList.indexOf(((ListView) adapterView).getAdapter().getItem(i))).getLastname() + "," + patientList.get(patientList.indexOf(((ListView) adapterView).getAdapter().getItem(i))).getFirstname()//                        + " " + patientList.get(patientList.indexOf(((ListView) adapterView).getAdapter().getItem(i))).getDob()                );                auto_patient.setEnabled(true);                edt_rx_number.requestFocus();                getDrugandRx(patientList.get(patientList.indexOf(((ListView) adapterView).getAdapter().getItem(i))).getExternal_patient_id());                patient = patientList.get(patientList.indexOf(((ListView) adapterView).getAdapter().getItem(i)));            }        });        if (patientPojo != null) {            auto_patient.setText(patientPojo.getLastname() + "," + patientPojo.getFirstname());            getDrugandRx(patientPojo.getExternal_patient_id());            patient = patientPojo;        } else {            auto_patient.setHint("Last Name, First Name");            patient = null;        }        auto_patient.setEnabled(false);        auto_patient.setEnabled(true);        auto_patient.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void afterTextChanged(Editable editable) {                if (editable.toString().length() == 0) {                    edt_drug.setText("");                    edt_rx_number.setText("");                }                patient = null;            }        });//        dialog.setOnKeyListener(new Dialog.OnKeyListener() {////            @Override//            public boolean onKey(DialogInterface arg0, int keyCode,//                                 KeyEvent event) {//                // TODO Auto-generated method stub//                if (keyCode == KeyEvent.KEYCODE_BACK && dialog.isShowing()) {//                    dialog.dismiss();//                }//                return true;//            }//        });        dialog.setOnCancelListener(new DialogInterface.OnCancelListener() {            @Override            public void onCancel(DialogInterface dialog) {                //do whatever you want the back key to do                dialog.dismiss();            }        });        add.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (auto_patient.getText().toString().trim().length() > 0 && edt_drug.getText().toString().trim().length() > 0 && spinner_delivery.getAdapter() != null && spinner_order.getAdapter() != null && edt_qty.getText().toString().trim().length() > 0) {                    if (isPatientValid(auto_patient.getText().toString())) {                        DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                switch (which) {                                    case DialogInterface.BUTTON_POSITIVE:                                        JSONObject json = new JSONObject();                                        try {                                            json.put("Deliverytype", ((Delivery) spinner_delivery.getAdapter().getItem(spinner_delivery.getSelectedItemPosition())).getDeliveryID());                                            json.put("Deliverydate", ((Delivery) spinner_delivery.getAdapter().getItem(spinner_delivery.getSelectedItemPosition())).getDeliveryDate());                                            json.put("Ordertype", ((Order) spinner_order.getAdapter().getItem(spinner_order.getSelectedItemPosition())).getOrdertypeID());                                            json.put("FacilityID", MyApplication.getPrefranceDataInt("ExFacilityID"));                                            json.put("Rxnumber", edt_rx_number.getText().toString());                                            json.put("PatientName", auto_patient.getText().toString());                                            json.put("drug", edt_drug.getText().toString());                                            json.put("CreatedBy", MyApplication.getPrefranceData("UserID"));                                            json.put("UpdatedBy", MyApplication.getPrefranceData("UserID"));                                            json.put("Note", edt_notes.getText().toString());                                            json.put("qty", edt_qty.getText().toString());                                            // json.put("deliverytime",delivery_time.getText().toString());                                            if (patient != null) {                                                json.put("PatientID", patient.getExternal_patient_id());                                            } else {                                                json.put("PatientID", "0");                                            }                                            if (base64 != null) {                                                json.put("DocumentPath", base64);                                            }                                        } catch (Exception ex) {                                        }                                        addOrderApicall(json);                                        dialog.dismiss();                                        base64 = null;                                        break;                                    case DialogInterface.BUTTON_NEGATIVE:                                        //No button clicked                                        break;                                }                            }                        };                        AlertDialog.Builder builder = new AlertDialog.Builder(PatientListActivityNew.this);                        builder.setMessage("Are you sure you want to order " + edt_qty.getText().toString() + " Qty?").setPositiveButton("Yes", dialogClickListener)                                .setNegativeButton("Cancel", dialogClickListener).show();                    } else {                        Utils.showAlertToast(PatientListActivityNew.this, "Invalid Patient format [Ex: Lastname,Firstname]");                    }                } else {                    Utils.showAlertToast(PatientListActivityNew.this, "Some value are missing");                }            }        });        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        new Handler().post(new Runnable() {            @Override            public void run() {                dialog.show();            }        });    }    @Override    protected void onPause() {        super.onPause();        unregisterReceiver(MyReceiver);        if (progressDialog != null && progressDialog.isShowing()) {            progressDialog.cancel();        }    }    @Override    protected void onStop() {        super.onStop();        if (progressDialog != null && progressDialog.isShowing()) {            progressDialog.dismiss();        }        try {            unregisterReceiver(broadcastReceiver);        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_patient_list, menu);//Menu Resource, Menu        MenuItem item = menu.findItem(R.id.action_change_facility);        item.setVisible(false);//        return true;    }    private void setBarcode(String msg) {        IntentIntegrator integrator = new IntentIntegrator(this);        integrator.setDesiredBarcodeFormats(IntentIntegrator.ALL_CODE_TYPES);        integrator.setPrompt(msg);        integrator.setBeepEnabled(true);        integrator.setOrientationLocked(false);        integrator.initiateScan();    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent intent) {        try {            IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, intent);            if (result != null) {                if (result.getContents() == null) {//cancel                } else {                    Log.e("result", result.getContents() + "\n" + result.getBarcodeImagePath() + "\n" + result.getFormatName() + "\n" + result.getErrorCorrectionLevel());                    if (SCANNED_BARCODE_ID == 0) {                        edt_rx_number.setText(result.getContents());                    } else {                        edt_drug.setText(result.getContents());                    }//Scanned successfully                }            } else {                super.onActivityResult(requestCode, resultCode, intent);//                if(requestCode==SELECT_TREE_FOLDER)//                {//                    Uri treeUri = intent.getData();//                    documentTreeUri = treeUri;//                    if (DocumentFile.fromTreeUri(context, treeUri).canWrite()) {//                        int  takeFlags = intent.getFlags()  & (Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);////                    takeFlags =////                            takeFlags and (Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION)//                        context.getContentResolver().takePersistableUriPermission(treeUri, takeFlags);//                        downloadTask();////                    PreferenceUtil[PreferenceKey.TREE_URI] = treeUri.toString();//                }//                }            }        } catch (Exception ex) {            ex.printStackTrace();            super.onActivityResult(requestCode, resultCode, intent);        }    }    private void addOrderApicall(JSONObject json) {        progressDialog.show();        NetworkUtility.makeJSONObjectRequest(API.AddOrder, json, API.AddOrder, new VolleyCallBack() {            @Override            public void onSuccess(JSONObject result) {                if (progressDialog != null && progressDialog.isShowing()) {                    progressDialog.dismiss();                    try {                        Utils.showAlertToast(PatientListActivityNew.this, result.getString("Message"));                        ///**/   sendNotification("Order", "Order received");                        dialog.dismiss();                    } catch (JSONException e) {                        e.printStackTrace();                    }                }            }            @Override            public void onError(JSONObject result) {                if (progressDialog != null && progressDialog.isShowing()) {                    progressDialog.dismiss();                }            }        });    }    private void getDrugandRx(String externalId) {        progressDialog.show();        NetworkUtility.makeJSONObjectRequest(API.PrescriptionData + "?ExternalPatientID=" + externalId, new JSONObject(), API.PrescriptionData, new VolleyCallBack() {            @Override            public void onSuccess(JSONObject result) {                if (progressDialog != null && progressDialog.isShowing()) {                    progressDialog.dismiss();                    try {                        Type listType = new TypeToken<List<PrescriptionData>>() {                        }.getType();                        prescriptionList = MyApplication.getGson().fromJson(result.getJSONArray("Data").toString(), listType);                        SearchableDrugAdapter adapter = new SearchableDrugAdapter(PatientListActivityNew.this, R.layout.simple_spinner_item, prescriptionList);                        edt_drug.setAdapter(adapter);                        edt_drug.setThreshold(1);                        edt_drug.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View view) {                                edt_drug.showDropDown();                            }                        });                        edt_drug.setOnItemClickListener(new AdapterView.OnItemClickListener() {                            @Override                            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {                                edt_drug.setEnabled(false);                                edt_drug.setText(prescriptionList.get(prescriptionList.indexOf(((ListView) adapterView).getAdapter().getItem(i))).getDrug());                                edt_drug.setEnabled(true);                                edt_rx_number.setText(prescriptionList.get(prescriptionList.indexOf(((ListView) adapterView).getAdapter().getItem(i))).getExternal_prescription_id());                                edt_qty.setText(prescriptionList.get(prescriptionList.indexOf(((ListView) adapterView).getAdapter().getItem(i))).getQty().toString());//                                String substr = ".00";//                                String[] parts = qty.split(substr);//                                String before = parts[0];//                                edt_qty.setText(before);                            }                        });                    } catch (JSONException e) {                        e.printStackTrace();                    }                }            }            @Override            public void onError(JSONObject result) {                if (progressDialog != null && progressDialog.isShowing()) {                    progressDialog.dismiss();                }            }        });    }    private boolean isPatientValid(String value) {        if (!value.contains(",")) {            return false;        } else {            return true;        }    }    private void openDialog(boolean b) {        if (b) {            final Dialog dialog = new Dialog(PatientListActivityNew.this);            dialog.setCancelable(false);            dialog.setCanceledOnTouchOutside(false);            dialog.setContentView(R.layout.accept_dialog);            WindowManager.LayoutParams lp = new WindowManager.LayoutParams();            Window window = dialog.getWindow();            lp.copyFrom(window.getAttributes());//This makes the dialog take up the full width            lp.width = WindowManager.LayoutParams.MATCH_PARENT;            lp.height = WindowManager.LayoutParams.WRAP_CONTENT;            window.setAttributes(lp);            TextView accept = (TextView) dialog.findViewById(R.id.dialog_txt_accept);            TextView decline = (TextView) dialog.findViewById(R.id.dialog_txt_decline);            accept.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    dialog.dismiss();                    AcceptTermsAPI();                }            });            decline.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    dialog.dismiss();                    //  imgLogout.performClick();                    LogoutAPICall();                }            });            dialog.show();        }    }    public boolean changeFacilityDialog(final boolean isFromLogin) {        Log.e("spinner_facility:", "spinner_facility: " + true);        try{            List<Facility> list = MyApplication.getGson().fromJson(MyApplication.getPrefranceData("Facility"), new TypeToken<List<Facility>>() {            }.getType());            if(list==null)            {                return false;            }            Log.e("list.size():", "list.size()--->: " + list.size() + "clickPosition--->" + clickPosition);            if (list != null && list.size() == 1) {                MyApplication.setPreferences("facilityName", list.get(0).getFacilityName());                MyApplication.setPreferences("facility", list.get(0).getFacilityID());                MyApplication.setPreferences("ExFacilityID", list.get(0).getExFacilityID());                MyApplication.setPreferences("GroupID", list.get(0).getGroupID());                //   getPatientList(list.get(0).getFacilityID());                imgChange.setVisibility(View.GONE);                toolbar_facility_name.setText(list.get(0).getFacilityName());                GlobalArea.selectedFacility = toolbar_facility_name.getText().toString();                if (clickPosition == 0) {                    replaceFragment(new PatientNewFragment(MyApplication.getPrefranceDataInt("facility")));                } else if (clickPosition == 1) {                    replaceFragment(new OrderHistoryNewFragment(isFromPatientList, isFacility, MyApplication.getPrefranceDataInt("facility")));                } else if (clickPosition == 2) {                    replaceFragment(new CycleActivity(MyApplication.getPrefranceDataInt("facility")));                } else if (clickPosition == 3) {                    replaceFragment(new MedPassPatientListActivity(MyApplication.getPrefranceDataInt("facility")));                } else if (clickPosition == 4) {                    replaceFragment(new InventoryFragment(MyApplication.getPrefranceDataInt("facility")));                }            }            else if (list != null && list.size() > 1) {                dialogChangeFacility = new Dialog(PatientListActivityNew.this);                dialogChangeFacility.setCancelable(false);                dialogChangeFacility.requestWindowFeature(Window.FEATURE_NO_TITLE);                dialogChangeFacility.setCanceledOnTouchOutside(false);                dialogChangeFacility.setContentView(R.layout.dialog_change_facility);                dialogChangeFacility.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));                WindowManager.LayoutParams lp = new WindowManager.LayoutParams();                Window window = dialogChangeFacility.getWindow();                lp.copyFrom(window.getAttributes());//This makes the dialog take up the full width                lp.width = WindowManager.LayoutParams.MATCH_PARENT;                lp.height = WindowManager.LayoutParams.WRAP_CONTENT;                window.setAttributes(lp);                spinner_facility = (Spinner) dialogChangeFacility.findViewById(R.id.spinner_facility);                TextView accept = (TextView) dialogChangeFacility.findViewById(R.id.btn_dialog_ok);                TextView decline = (TextView) dialogChangeFacility.findViewById(R.id.btn_dialog_cancel);                accept.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        dialogChangeFacility.dismiss();                        if (spinner_facility.getAdapter() != null) {                            MyApplication.setPreferences("facilityName", ((Facility) spinner_facility.getAdapter().getItem(spinner_facility.getSelectedItemPosition())).getFacilityName());                            MyApplication.setPreferences("facility", ((Facility) spinner_facility.getAdapter().getItem(spinner_facility.getSelectedItemPosition())).getFacilityID());                            MyApplication.setPreferences("GroupID", ((Facility) spinner_facility.getAdapter().getItem(spinner_facility.getSelectedItemPosition())).getGroupID());                            MyApplication.setPreferences("ExFacilityID", ((Facility) spinner_facility.getAdapter().getItem(spinner_facility.getSelectedItemPosition())).getExFacilityID());                            MyApplication.setPreferences("facility_selected_index", spinner_facility.getSelectedItemPosition());                            //getPatientList(((Facility) spinner_facility.getSelectedItem()).getFacilityID());                            toolbar_facility_name.setText(((Facility) spinner_facility.getAdapter().getItem(spinner_facility.getSelectedItemPosition())).getFacilityName());                            GlobalArea.selectedFacility = toolbar_facility_name.getText().toString();                            if (clickPosition == 0) {                                replaceFragment(new PatientNewFragment(MyApplication.getPrefranceDataInt("facility")));                            } else if (clickPosition == 1) {                                replaceFragment(new OrderHistoryNewFragment(isFromPatientList, isFacility, MyApplication.getPrefranceDataInt("facility")));                            } else if (clickPosition == 2) {                                replaceFragment(new CycleActivity(MyApplication.getPrefranceDataInt("facility")));                            } else if (clickPosition == 3) {                                replaceFragment(new MedPassPatientListActivity(MyApplication.getPrefranceDataInt("facility")));                            } else if (clickPosition == 4) {                                replaceFragment(new InventoryFragment(MyApplication.getPrefranceDataInt("facility")));                            }                        }                    }                });                decline.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        dialogChangeFacility.dismiss();//                    if (isFromLogin)//                       // imgLogout.performClick();//                    LogoutAPICall();                    }                });                fillFacilitySpinner();                dialogChangeFacility.show();            } else {                LogoutAPICall();            }            invalidateOptionsMenu();            return true;        }        catch(Exception e){            Log.e("TAG","exception in changeFacility dialog is :"+e.getMessage());            return false;        }    }    private void GetAllPatientMedSheetReport() {        // progressDialog.show();        Call<MedSheetDownloadReportModel> call = apiService.getPatientMedSheetDownloadReport(MyApplication.getPrefranceData("UserID"), (Device_id));        call.enqueue(new Callback<MedSheetDownloadReportModel>() {            @SuppressLint("DefaultLocale")            @Override            public void onResponse(@NonNull Call<MedSheetDownloadReportModel> call, @NonNull Response<MedSheetDownloadReportModel> response) {                if (Utils.checkInternetConnection(getApplicationContext())) {                    modelList = new ArrayList<>();                    assert response.body() != null;                    if (response.body().getData() != null) {                        modelList.clear();                        modelList = response.body().getData();                        finalCount = modelList.size();                        finalCount = finalCount - 1;                        if (modelList.size() > 0) {                            downloadTask();                        }else{                            PreferenceHelper.putString("LOGOUT","true");                        }                    }                }            }            @Override            public void onFailure(@NonNull Call<MedSheetDownloadReportModel> call, @NonNull Throwable t) {                Log.e("TAG", t.toString());            }        });      /*        NetworkUtility.makeJSONObjectRequest(API.GetAllPatientMedSheetReport + "?FacilityID=" + Application.getPrefranceDataInt("facility"), new JSONObject(), API.GetAllPatientMedSheetReport, new VolleyCallBack() {            @Override            public void onSuccess(JSONObject result) {                try {                    if (result != null) {                        modelList = new ArrayList<>();                        Type listType = new TypeToken<List<AllPatientMedSheetModel.DataBean>>() {                        }.getType();                        modelList = Application.getGson().fromJson(result.getJSONArray("Data").toString(), listType);                        finalCount = modelList.size();                        if (modelList.size() > 0) {                            downloadTask();                        }                    }                } catch (Exception ex) {                    ex.printStackTrace();                }            }            @Override            public void onError(JSONObject result) {            }        });*/    }    private void downloadTask() {       /* if (!url.startsWith("http")) {            return false;        }*/        try {             /* String abc =Environment.getExternalStorageDirectory()                    + "/" + Environment.DIRECTORY_DOWNLOADS                    + File.separator + context.getResources().getString(R.string.app_name);            File result = new File(abc + File.separator + modelList.get(count).getPatientName() + "_" + modelList.get(count).getExternal_Patient_Id() + ".pdf");            Log.e("TAG", "downloadTask: " + result );*/            //            String abc = Environment.getExternalStorageDirectory() + "/" + context.getResources().getString(R.string.app_name);//            File directory = new File(abc);//            File result = new File(directory + File.separator + modelList.get(count).getPatientName() + "_" + modelList.get(count).getExternal_Patient_Id() + ".pdf");//            File dir = getFilesDir();//            File file = new File(dir, abc + File.separator + modelList.get(count).getPatientName() + "_" + modelList.get(count).getExternal_Patient_Id() + ".pdf");//            boolean deleted = file.delete();           /*   if(file.isFile()){                boolean deleted = file.delete();            }*/          /*  String abc = Environment.getExternalStorageDirectory()                    + "/" + Environment.DIRECTORY_DOCUMENTS                    + File.separator + context.getResources().getString(R.string.app_name) + File.separator + "NewFolder";            //            File file = new File(getFilesDir(),abc);//            File sourceLocation = new File(abc + File.separator + modelList.get(count).getPatientName() + "_" + modelList.get(count).getExternal_Patient_Id() + ".pdf");            File result = new File(abc + File.separator + modelList.get(count).getPatientName() + "_" + modelList.get(count).getExternal_Patient_Id() + ".pdf");            File f = new File(abc);            if (!f.exists()) {                f.mkdirs();            }            if (result.exists()) {                Log.e("TAG", "downloadTask:Delete " + "call 1");//                if (result.getAbsolutePath().endsWith(".pdf")) {                try {                    result.getCanonicalFile().delete();//                        context.deleteFile(result.getName());                } catch (Exception e) {                    Log.e("TAG", "downloadTask:Delete " + e);                }//                }            }*///            if (Build.VERSION.SDK_INT >= 29) {//                // uri is the path which we've saved in our shared pref//                DocumentFile fromTreeUri = DocumentFile.fromTreeUri(context, documentTreeUri);//                DocumentFile[] documentFiles = fromTreeUri.listFiles();//////                for (int i = 0; i < documentFiles.length; i++) {//                    documentFiles[i].getUri().toString();//uri of the document////                    boolean isUriDelete = deleteDocumentUri(context,documentFiles[i].getUri());////                }//            }            String sourcepath = Environment.getExternalStorageDirectory()                    + File.separator + Environment.DIRECTORY_DOCUMENTS                    + File.separator + context.getResources().getString(R.string.app_name);          /*  String dirPath = getFilesDir().getAbsolutePath() + File.separator + "ftp" + File.separator + "CANADATEST";            File projDir = new File(dirPath+ File.separator + modelList.get(count).getPatientName() + "_" + modelList.get(count).getExternal_Patient_Id() + ".pdf");            if (!projDir.exists())                projDir.mkdirs();*/            // File file = new File(getFilesDir(),abc);            File sourceLocation = new File(sourcepath + File.separator + modelList.get(count).getPatientName() + "_" + modelList.get(count).getExternal_Patient_Id() + ".pdf");            Log.e("TAG","source file path is : "+sourceLocation.getAbsolutePath());//            addFileToPublicDocuments(context,sourceLocation.getAbsolutePath(),"application/pdf",sourceLocation.getName());            boolean isFileDelete = deleteMediaFileByPath(context,sourceLocation.getAbsolutePath());            Log.e("TAG","value of file delete is : "+isFileDelete);            if(!isFileDelete)            {//                File file = new File(sourceLocation.getAbsolutePath());                Uri fileUri = FileProvider.getUriForFile(this, context.getPackageName() + ".provider", sourceLocation);                Log.e("TAG","uri is : "+fileUri.toString());                boolean isFileDelete1  = deleteFileFromMediaStore(context,fileUri);                Log.e("TAG","value of uri delete is : "+isFileDelete1);            }//            if(sourceLocation.exists()){//                sourceLocation.getCanonicalFile().delete();//                if(sourceLocation.exists()){//                    getApplicationContext().deleteFile(sourceLocation.getName());//                }//            }/*            if (sourceLocation.exists()) {                try {                    String replce = Environment.getExternalStorageDirectory()                            + File.separator + Environment.DIRECTORY_DOWNLOADS                            + File.separator + context.getResources().getString(R.string.app_name) + File.separator + "NewFolder";                    File file = new File(replce);                    if (!file.exists()) {                        file.mkdirs();                    }                    File targetLocation = new File(replce + File.separator + modelList.get(count).getPatientName() + "_" + modelList.get(count).getExternal_Patient_Id() + ".pdf");                    if (sourceLocation.renameTo(targetLocation)) {                        Log.e("TAG", "Move file successful.");                    } else {                        Log.e("TAG", "Move file failed.");                    }                    File dir = new File(replce);                    if (dir.isDirectory()) {                        String[] children = dir.list();                        for (int i = 0; i < children.length; i++) {                            new File(dir, children[i]).delete();                        }                    }                    dir.delete();                } catch (Exception e) {                    Log.e("TAG", "downloadTask: " + e);                }            }*/            /*if(result.exists()) {                File file2 = new File(result.getAbsolutePath());                file2.delete();//                deleteFile(abc);//                Toast.makeText(context, "file delete successfully", Toast.LENGTH_SHORT).show();//                abc.delete();//                abc.mkdir();            }*/            //            file = new File(abc);//            Log.e(TAG, "saveImageAsPerQuality: >>>>>>>" + file, null);//            File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "Download");//            Log.e("TAG", "downloadTask11: "+file );            //comment code//            if (result.isDirectory()) {//                Log.d(TAG, "Delete Directory :" + dir.getAbsolutePath());//                try {//                    result.isDirectory().d//                } catch (IOException e) {//                    e.printStackTrace();//                }//            }               /* if(result.exists()){//                    getApplicationContext().deleteFile(result.getName());//                    removeDirectory(abc);                    result.delete();                }*///                Toast.makeText(this, "File Deleted "+isDeleted, Toast.LENGTH_SHORT).show();            DownloadManager downloadManager = (DownloadManager) getSystemService(DOWNLOAD_SERVICE);            DownloadManager.Request request = new DownloadManager.Request(Uri.parse(modelList.get(count).getFileName()));//            DownloadManager.Request request = new DownloadManager.Request(Uri.parse("https://www.africau.edu/images/default/sample.pdf"));            request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE | DownloadManager.Request.NETWORK_WIFI);            request.setDestinationUri(Uri.fromFile(sourceLocation));            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);            if (downloadManager != null) {                downloadID = downloadManager.enqueue(request);            }            //mToast(mContext, "Starting download...");            MediaScannerConnection.scanFile(context, new String[]{sourceLocation.toString()}, null, new MediaScannerConnection.OnScanCompletedListener() {                @Override                public void onScanCompleted(String path, Uri uri) {                }            });           /* MediaScannerConnection.scanFile(context, new String[]{result.toString()}, null,                    new MediaScannerConnection.OnScanCompletedListener() {                        public void onScanCompleted(String path, Uri uri) {                        }                    });*/        } catch (Exception e) {            Log.e(">>>>>", e.toString());            //mToast(this, e.toString());        }    }    @RequiresApi(api = Build.VERSION_CODES.KITKAT)    public static String getFilePathFromDocumentUri(Context context, Uri treeUri) {        DocumentFile documentFile = DocumentFile.fromTreeUri(context, treeUri);        if (documentFile == null || !documentFile.exists()) {            return null;        }        // Start constructing the file path recursively        StringBuilder filePathBuilder = new StringBuilder(documentFile.getName());//        while (true) {//            Uri parentUri = DocumentsContract.(context, documentFile.getUri());//            if (parentUri == null) {//                // Reached the root document, break the loop//                break;//            }////            DocumentFile parentDocument = DocumentFile.fromSingleUri(context, parentUri);//            if (parentDocument == null || !parentDocument.exists()) {//                break;//            }////            // Prepend the parent's display name to the file path//            filePathBuilder.insert(0, parentDocument.getName() + "/");//            documentFile = parentDocument;//        }        // The final file path will be in the filePathBuilder        return filePathBuilder.toString();    }    public static void addFileToPublicDocuments(Context context, String filePath, String mimeType,String fileName) throws IOException {        Log.e("TAG","add in file param is : "+fileName);        ContentResolver contentResolver = context.getContentResolver();        // Create a new ContentValues instance to store the file details        ContentValues values = new ContentValues();        values.put(MediaStore.Files.FileColumns.DISPLAY_NAME, fileName); // Replace with your desired file name        values.put(MediaStore.Files.FileColumns.MIME_TYPE, mimeType);        // For Android Q (API level 29) and above, use the MediaStore.Downloads content URI        Uri contentUri;        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {            values.put(MediaStore.Files.FileColumns.RELATIVE_PATH, Environment.DIRECTORY_DOCUMENTS);            contentUri = MediaStore.Downloads.EXTERNAL_CONTENT_URI;        } else {            // For Android versions prior to Q, use the MediaStore.Files content URI            File publicDocumentsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);            String publicDocumentsPath = publicDocumentsDir.getAbsolutePath();            String filePathWithoutRoot = filePath.substring(publicDocumentsPath.length());            values.put(MediaStore.Files.FileColumns.DATA, filePathWithoutRoot);            contentUri = MediaStore.Files.getContentUri("external");        }        // Insert the file into the MediaStore database        Uri uri = contentResolver.insert(contentUri, values);        // Open the output stream to write the file content        try (OutputStream outputStream = contentResolver.openOutputStream(uri)) {            // Read the file from the original location and write it to the MediaStore location            File file = new File(filePath);            try (FileInputStream inputStream = new FileInputStream(file)) {                byte[] buffer = new byte[4096];                int bytesRead;                while ((bytesRead = inputStream.read(buffer)) != -1) {                    outputStream.write(buffer, 0, bytesRead);                }            }        }    }    public static boolean deleteDocumentUri(Context context, Uri documentUri) {        ContentResolver contentResolver = context.getContentResolver();        // Check if the document exists before attempting to delete it        if (!isDocumentUriExists(context, documentUri)) {            return false;        }        // Perform the deletion using the ContentResolver        int rowsDeleted = contentResolver.delete(documentUri, null, null);        // Return true if the deletion was successful, false otherwise        return rowsDeleted > 0;    }    private static boolean isDocumentUriExists(Context context, Uri documentUri) {        ContentResolver contentResolver = context.getContentResolver();        try {            // Try querying the document URI to check if it exists            contentResolver.query(documentUri, null, null, null, null).close();            return true;        } catch (Exception e) {            return false;        }    }    public static long getFileIdFromPath(Context context, String filePath) {        ContentResolver contentResolver = context.getContentResolver();        Uri contentUri = MediaStore.Files.getContentUri("external");        String[] projection = new String[]{MediaStore.Files.FileColumns._ID};        String selection = MediaStore.Files.FileColumns.DATA + "=?";        String[] selectionArgs = new String[]{filePath};        Cursor cursor = contentResolver.query(contentUri, projection, selection, selectionArgs, null);        long fileId = -1;        if (cursor != null && cursor.moveToFirst()) {            int idColumnIndex = cursor.getColumnIndexOrThrow(MediaStore.Files.FileColumns._ID);            fileId = cursor.getLong(idColumnIndex);            cursor.close();        }        return fileId;    }    public static boolean deleteFileFromMediaStore(Context context, Uri fileUri) {        ContentResolver contentResolver = context.getContentResolver();        // Check if the file exists in the MediaStore        if (!isFileInMediaStore(context, fileUri)) {            return false;        }        // Delete the file using the MediaStore        int rowsDeleted = contentResolver.delete(fileUri, null, null);        // Return true if the deletion was successful, false otherwise        return rowsDeleted > 0;    }    private static boolean isFileInMediaStore(Context context, Uri fileUri) {        ContentResolver contentResolver = context.getContentResolver();        try {            // Try querying the MediaStore to check if the file exists            contentResolver.query(fileUri, null, null, null, null).close();            return true;        } catch (Exception e) {            return false;        }    }    public static void deletePublicFile(Context context, String path) {        ContentResolver contentResolver = context.getContentResolver();        Uri contentUri = MediaStore.Files.getContentUri("external");        long fileId = getFileIdFromPath(context,path);        // Build the file URI based on the file ID        Uri itemUri = ContentUris.withAppendedId(contentUri, fileId);        // Check for the file's existence before attempting to delete it        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {            String[] projection = new String[]{MediaStore.Files.FileColumns.DATA};            String selection = MediaStore.Files.FileColumns._ID + "=?";            String[] selectionArgs = new String[]{String.valueOf(fileId)};            Cursor cursor = contentResolver.query(contentUri, projection, selection, selectionArgs, null);            if (cursor != null && cursor.moveToFirst()) {                String filePath = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Files.FileColumns.DATA));                File file = new File(filePath);                if (file.exists()) {                    // The file exists, so attempt to delete it                    contentResolver.delete(itemUri, null, null);                }                cursor.close();            }        } else {            // For versions prior to Android 10, directly delete the file            contentResolver.delete(itemUri, null, null);        }    }    public static boolean deleteMediaFileByPath(Context context, String filePath) {        ContentResolver contentResolver = context.getContentResolver();        // Query the MediaStore to get the file URI based on the file path        Uri contentUri = MediaStore.Files.getContentUri("external");        String[] projection = new String[]{MediaStore.Files.FileColumns._ID};        String selection = MediaStore.Files.FileColumns.DATA + "=?";        String[] selectionArgs = new String[]{filePath};//        int rowsDeleted = contentResolver.delete(contentUri, selection, selectionArgs);        // Return true if the file was successfully deleted//        return rowsDeleted > 0;        long fileId = -1;        Cursor cursor = contentResolver.query(contentUri, null, selection, selectionArgs, null);        if (cursor != null && cursor.moveToFirst()) {            int idColumnIndex = cursor.getColumnIndexOrThrow(MediaStore.Files.FileColumns._ID);            fileId = cursor.getLong(idColumnIndex);            cursor.close();        }//        if (fileId != -1) {            // Build the file URI based on the file ID            Uri itemUri = ContentUris.withAppendedId(contentUri, fileId);            // Delete the media file using the content resolver            int deletedRows = contentResolver.delete(itemUri, null, null);            // Check if the deletion was successful            return deletedRows > 0;        }        return false;    }    public static boolean removeDirectory(File directory) {        // System.out.println("removeDirectory " + directory);        if (directory == null)            return false;        if (!directory.exists())            return true;        if (!directory.isDirectory())            return false;        String[] list = directory.list();        // Some JVMs return null for File.list() when the        // directory is empty.        if (list != null) {            for (int i = 0; i < list.length; i++) {                File entry = new File(directory, list[i]);                if (entry.isDirectory()) {                    if (!removeDirectory(entry))                        return false;                } else {                    if (!entry.delete())                        return false;                }            }        }        return directory.delete();    }    private void UpdatePatientMedSheetDownloadStatus(int medsheetID,int userId,int external_Facility_Id, int external_Patient_Id,String device_id,int isDownload) {        JSONObject param = new JSONObject();//        Log.e("TAG", "UpdatePatientMedSheetDownloadStatus: "+downloadDate );        try {            param.put("Device_id", device_id);//            param.put("DownloadDate", downloadDate);            param.put("External_Facility_Id", external_Facility_Id);            param.put("External_Patient_Id", external_Patient_Id);            param.put("IsDownload", isDownload);            param.put("MedsheetID", medsheetID);            param.put("UserId", userId);            Log.e("TAG", "UpdatePatientMedSheetDownloadStatus: " + param);        } catch (JSONException ex) {            ex.printStackTrace();        }        NetworkUtility.makeJSONObjectRequest(API.UpdatePatientMedSheetDownloadStatus, param, API.UpdatePatientMedSheetDownloadStatus, new VolleyCallBack() {            @Override            public void onSuccess(JSONObject result) {                try {                    if (result != null) {                        Log.e("TAG", "onSuccess: " + "API Call");                    }                } catch (Exception ex) {                    ex.printStackTrace();                    dismissProgressDialog();                }                dismissProgressDialog();            }            @Override            public void onError(JSONObject result) {                dismissProgressDialog();            }        });       /* // RequestBody bodyRequest = RequestBody.create(MediaType.parse("application/json"), downloadSuccessRequestModelsList.toString());        Call<DownloadStatusModel> call = apiService.UpdatePatientMedSheetDownloadStatus(downloadSuccessRequestModelsList);        call.enqueue(new Callback<DownloadStatusModel>() {            @SuppressLint("DefaultLocale")            @Override            public void onResponse(@NonNull Call<DownloadStatusModel> call, @NonNull Response<DownloadStatusModel> response) {                if (Utils.checkInternetConnection(getApplicationContext())) {                    assert response.body() != null;                    if (response.body().isData()) {                        Log.e("isData:", "onResponse: " + response.body().isData());                    }                }            }            @Override            public void onFailure(@NonNull Call<DownloadStatusModel> call, @NonNull Throwable t) {                Log.e("TAG", t.toString());            }        });*/    }    private void AcceptTermsAPI() {        progressDialog.show();        NetworkUtility.makeJSONObjectRequest(API.ConfirmHipa + "?UserID=" + MyApplication.getPrefranceData("UserID"), new JSONObject(), API.ConfirmHipa, new VolleyCallBack() {            @Override            public void onSuccess(JSONObject result) {                try {                    if (progressDialog != null && progressDialog.isShowing()) {                        progressDialog.dismiss();                    }                    MyApplication.setPreferences("IsConfirm", "true");                    if (result != null) {                        changeFacilityDialog(true);                        Type listType = new TypeToken<List<PatientPOJO>>() {                        }.getType();                    }                } catch (Exception ex) {                    ex.printStackTrace();                }            }            @Override            public void onError(JSONObject result) {                if (progressDialog != null && progressDialog.isShowing()) {                    progressDialog.dismiss();                }            }        });    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == R.id.action_change_facility) {            //  imgChange.performClick();            changeFacilityDialog(false);            return true;        }        return super.onOptionsItemSelected(item);    }    @Override    public boolean onPrepareOptionsMenu(Menu menu) {        super.onPrepareOptionsMenu(menu);        List<Facility> list = MyApplication.getGson().fromJson(MyApplication.getPrefranceData("Facility"), new TypeToken<List<Facility>>() {        }.getType());        try {            if (list != null && list.size() <= 1) {                menu.findItem(R.id.action_change_facility).setVisible(false);            }        } catch (Exception e) {            e.printStackTrace();        }        return true;    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(onComplete);    }    @Override    protected void onResume() {        super.onResume();        registerReceiver(broadcastReceiver, new IntentFilter("com.notification"));        broadcastIntent();        if (MyApplication.getPrefranceDataBoolean("isLogin")) {            if (Utils.checkInternetConnection(this)) {                updateNotificationIcon();                getPasswordFlag();                checkLastPasswordTiming();            }        }        if (Utils.checkInternetConnection(getApplicationContext())) {            broadcastIntent();            Log.e("TAG", "broadcastIntent:________________________________> ");        }    }    /**     * This function check the last time when password is changed     */    private void checkLastPasswordTiming() {        if (MyApplication.getPrefranceDataBoolean("IsChangePassword")) {//            startActivity(new Intent(PatientListActivityNew.this, ChangePasswordActivity.class));//            finish();//            openForceChangePassword();        } else {            //First time it will store today's date            if (MyApplication.getPrefranceData(Constants.LastPasswordChangeDate).isEmpty()) {                MyApplication.setPreferences(Constants.LastPasswordChangeDate, Utils.getDefaultFormatedDate(new Date()));                MyApplication.setPreferencesBoolean(Constants.PasswordChangeNotified, false);            } else {                //if days are greater then 90 then it will directly force user to update password                if (Utils.getDiffBetweenDays(MyApplication.getPrefranceData(Constants.LastPasswordChangeDate), Utils.getDefaultFormatedDate(new Date())) > Constants.getPasswordChangeDuration()) {                    MyApplication.setPreferencesBoolean(Constants.PasswordChangeNotified, false);                    startActivity(new Intent(PatientListActivityNew.this, ChangePasswordActivity.class));                    finish();                    Utils.showAlertToast(PatientListActivityNew.this, "Looks like you haven't changed password in " + Constants.getPasswordChangeDuration() + ". Please reset password to continue access of pelmeds");                }                // if it's 10 days before the password expiration then it will be show a pop but only once                else if (Utils.getDiffBetweenDays(MyApplication.getPrefranceData(Constants.LastPasswordChangeDate), Utils.getDefaultFormatedDate(new Date())) >= (Constants.getPasswordChangeDuration() - Constants.PasswordChangeNotificationPeriods)) {                    //if popup has already shown one time then it will not show next time                    if (!MyApplication.getPrefranceDataBoolean(Constants.PasswordChangeNotified)) {                        long remainingDays = Constants.getPasswordChangeDuration() - Utils.getDiffBetweenDays(MyApplication.getPrefranceData(Constants.LastPasswordChangeDate), Utils.getDefaultFormatedDate(new Date()));                        if (remainingDays < 1) {                            redirectToChangePassword();                        } else {                            MyApplication.setPreferencesBoolean(Constants.PasswordChangeNotified, true);                            AlertDialog.Builder builder = new AlertDialog.Builder(PatientListActivityNew.this);                            builder.setMessage("Your password will expire in " + remainingDays + " day(s), would you like to change the password?").setPositiveButton("Update", new DialogInterface.OnClickListener() {                                        @Override                                        public void onClick(DialogInterface dialog, int which) {                                            startActivity(new Intent(PatientListActivityNew.this, ChangePasswordActivity.class));                                        }                                    })                                    .setNegativeButton("Cancel", null).show();                            dismissProgressDialog();                        }                    }                } else {                    MyApplication.setPreferencesBoolean(Constants.PasswordChangeNotified, false);                }            }        }    }    public void getOrderndDelivery(final PatientPOJO patient) {        progressDialog.show();        NetworkUtility.makeJSONObjectRequest(API.OrderDelivertype, new JSONObject(), API.OrderDelivertype, new VolleyCallBack() {            @Override            public void onSuccess(JSONObject result) {                try {                    if (progressDialog != null && progressDialog.isShowing()) {                        progressDialog.dismiss();                    }                    if (result != null) {                        deliverylist = MyApplication.getGson().fromJson(result.getJSONObject("Data").getJSONArray("Delivery_WorkingDay").toString(), new TypeToken<List<Delivery>>() {                        }.getType());                        orderlist = MyApplication.getGson().fromJson(result.getJSONObject("Data").getJSONArray("Ordertype").toString(), new TypeToken<List<Order>>() {                        }.getType());                        openAddOrderDialog(patient);                    }                } catch (Exception ex) {                    ex.printStackTrace();                }            }            @Override            public void onError(JSONObject result) {                if (progressDialog != null && progressDialog.isShowing()) {                    progressDialog.dismiss();                }            }        });    }    public void openMedsheetDialog(String facilityName, String PatientId) {        final String[] months = new String[]{"January", "February",                "March", "April", "May", "June", "July", "August", "September",                "October", "November", "December"};        final String[] years = new String[]{"2017", "2018",                "2019", "2020", "2021", "2022", "2023", "2024", "2025",};        Calendar cal = Calendar.getInstance();        SimpleDateFormat month_date = new SimpleDateFormat("MMMM");        String month_name = month_date.format(cal.getTime());        Log.e("Month Name", month_name);        int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);        String todayDate = new SimpleDateFormat("dd", Locale.getDefault()).format(new Date());        Log.e("Today Date", todayDate);        int count = days / 2;        Log.e("Count", String.valueOf(count));        Calendar now = Calendar.getInstance();        int year = now.get(Calendar.YEAR);        String yearInString = String.valueOf(year);        Log.e("Year", yearInString);        Dialog dialog = new Dialog(PatientListActivityNew.this);        //    dialog.setCancelable(false);        //    dialog.setCanceledOnTouchOutside(false);        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        dialog.setContentView(R.layout.dialog_med_sheet);        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();        Window window = dialog.getWindow();        lp.copyFrom(window.getAttributes());//This makes the dialog take up the full width        lp.width = WindowManager.LayoutParams.MATCH_PARENT;        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;        window.setAttributes(lp);        Spinner spinner_month = (Spinner) dialog.findViewById(R.id.spinner_month);        Spinner spinner_year = (Spinner) dialog.findViewById(R.id.spinner_year);        Button tv_save = (Button) dialog.findViewById(R.id.tv_save);        Button tv_close_dialog = (Button) dialog.findViewById(R.id.tv_close_dialog);        setTimeSpinner(spinner_month, months);        setTimeSpinner(spinner_year, years);        for (int i = 0; i < spinner_month.getCount(); i++) {            if (Integer.parseInt(todayDate) >= count) {                if (spinner_month.getItemAtPosition(i).toString().equalsIgnoreCase(month_name)) {                    spinner_month.setSelection(i);                }            } else {                if (spinner_month.getItemAtPosition(i).toString().equalsIgnoreCase(month_name)) {                    spinner_month.setSelection(i);                }            }        }        for (int i = 0; i < spinner_year.getCount(); i++) {            if (spinner_year.getItemAtPosition(i).toString().equalsIgnoreCase(yearInString)) {                spinner_year.setSelection(i);            }        }        tv_save.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                getMedpassList(facilityName, spinner_month.getSelectedItem().toString(), spinner_year.getSelectedItem().toString(), PatientId, dialog);            }        });        tv_close_dialog.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                dialog.dismiss();            }        });        dialog.show();        dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);    }    private void getMedpassList(String facilityName, String month, String year, String            patientID, Dialog dialog) {        //progressDialog.show();        KProgressHUD hud1;        hud1 = KProgressHUD.create(Objects.requireNonNull(PatientListActivityNew.this))                .setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)                .setLabel("it may take a while to complete. \n\t\t\t\tPlease be patient.")                .setCancellable(false);        hud1.show();        long time = System.currentTimeMillis();        Log.e("requestTime: ", " Time value in millisecinds " + time);        Call<MedsheetUrlModel> call = apiService.getMedsheeturl(facilityName, month, year, patientID);        call.enqueue(new Callback<MedsheetUrlModel>() {            @SuppressLint("DefaultLocale")            @Override            public void onResponse(@NonNull Call<MedsheetUrlModel> call, @NonNull Response<MedsheetUrlModel> response) {                if (Utils.checkInternetConnection(getApplicationContext())) {                    long time = System.currentTimeMillis();                    Log.e("ResponseTime: ", " Time value in millisecinds " + time);                    if (response.body() != null) {                        if (response.body().getResponseStatus() == 1) {                            if (response.body().getData() != null && !response.body().getData().isEmpty()) {                                Intent intent = new Intent(PatientListActivityNew.this, PDFViewActivity.class);                                intent.putExtra("url", response.body().getData());                                startActivity(intent);                            } else {                                Utils.showAlertToast(PatientListActivityNew.this, "No Medsheet found");                            }                        } else {                            Utils.showAlertToast(PatientListActivityNew.this, "No Medsheet found");                        }                    } else {                        Utils.showAlertToast(PatientListActivityNew.this, "No Medsheet found");                    }                    hud1.dismiss();                }            }            @Override            public void onFailure(@NonNull Call<MedsheetUrlModel> call, @NonNull Throwable t) {//                Log.e("TAG", t.toString());                showAlertDialog(getString(R.string.connection_fail),getString(R.string.please_wait));                hud1.dismiss();            }        });      /*  NetworkUtility.makeJSONObjectRequest(API.GetPatientMedsheetReport + "?FacilityName=" + facilityName + "&ddlmonth=" + month + "&ddlYear=" + year + "&PatientID=" + patientID, new JSONObject(), API.GetPatientMedsheetReport, new VolleyCallBack() {            @Override            public void onSuccess(JSONObject result) {                hud.dismiss();                try {               //     progressDialog.dismiss();                    if (!result.getString("Data").equalsIgnoreCase("")) {                        Intent intent = new Intent(PatientListActivityNew.this, PDFViewActivity.class);                        intent.putExtra("url", result.getString("Data"));                        startActivity(intent);                        dialog.dismiss();                    } else {                        Utils.showAlertToast(PatientListActivityNew.this, "No Medsheet found");                    }                } catch (Exception ex) {                    ex.printStackTrace();                  //  progressDialog.dismiss();                }            }            @Override            public void onError(JSONObject result) {                hud.dismiss();            }        });*/    }    public void setTimeSpinner(final Spinner spinner, String[] list) {        final ArrayAdapter<String> cycleStartDateArrayAdapter = new ArrayAdapter<String>                (PatientListActivityNew.this, R.layout.simple_spinner_item,                        list);        cycleStartDateArrayAdapter.setDropDownViewResource(R.layout                .spinner_dropdown_item);        runOnUiThread(new Runnable() {            @Override            public void run() {                spinner.setAdapter(cycleStartDateArrayAdapter);//setting the adapter data into the AutoCompleteTextView            }        });    }    private void redirectToChangePassword() {        try {            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);            alertDialogBuilder.setCancelable(false);            alertDialogBuilder.setMessage("Password is expired, must need to change the password.");            alertDialogBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int arg1) {                    dialog.dismiss();                    startActivity(new Intent(PatientListActivityNew.this, ChangePasswordActivity.class));                    finish();                }            });            AlertDialog alertDialog = alertDialogBuilder.create();            alertDialog.show();        } catch (Exception e) {            e.printStackTrace();        }    }    public void blink() {        Animation animation1 =                AnimationUtils.loadAnimation(getApplicationContext(),                        R.anim.blink);        imgBanner.startAnimation(animation1);    }    private void dialogBanner() {        dialogBanner = new Dialog(PatientListActivityNew.this);        dialogBanner.requestWindowFeature(Window.FEATURE_NO_TITLE);        dialogBanner.setContentView(R.layout.dialog_banner);        dialogBanner.setCancelable(false);        RecyclerView rv_emergancy = (RecyclerView) dialogBanner.findViewById(R.id.recycler_view_emergancy);        RecyclerView rv_holiday = (RecyclerView) dialogBanner.findViewById(R.id.recycler_view_holiday);        TextView btn_dismiss = (TextView) dialogBanner.findViewById(R.id.btn_dismiss);        LinearLayout ll_emergancy = (LinearLayout) dialogBanner.findViewById(R.id.ll_emergancy);        LinearLayout ll_holiday = (LinearLayout) dialogBanner.findViewById(R.id.ll_holiday);        holidayAdapter = new HolidayAdapter(PatientListActivityNew.this, BaseActivity.holidayMasterList);        layoutManager = new LinearLayoutManager(PatientListActivityNew.this);        rv_holiday.setLayoutManager(layoutManager);        rv_holiday.setAdapter(holidayAdapter);        emergencyAdapter = new EmergencyAdapter(PatientListActivityNew.this, BaseActivity.emergencyMessageList);        layoutManager = new LinearLayoutManager(PatientListActivityNew.this);        rv_emergancy.setLayoutManager(layoutManager);        rv_emergancy.setAdapter(emergencyAdapter);        btn_dismiss.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                dialogBanner.dismiss();            }        });        if (emergencyMessageList.size() < 0) {            ll_emergancy.setVisibility(View.GONE);        }        if (holidayMasterList.size() < 0) {            ll_holiday.setVisibility(View.GONE);        }        dialogBanner.show();        dialogBanner.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);    }    private void openForceChangePassword() {        DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                switch (which) {                    case DialogInterface.BUTTON_POSITIVE:                        startActivity(new Intent(PatientListActivityNew.this, ChangePasswordActivity.class));                        finish();                        break;                }            }        };        AlertDialog.Builder builder = new AlertDialog.Builder(this);        builder.setCancelable(false);        builder.setMessage("Your password is expired, please change your password").setPositiveButton("OK", dialogClickListener)                .show();    }    private void dialogForImageAddOrder() {        DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                switch (which) {                    case DialogInterface.BUTTON_POSITIVE:                        //Yes button clicked                  /*      PickImageDialog.build(new PickSetup())                                .setOnPickCancel(new IPickCancel() {                                    @Override                                    public void onCancelClick() {                                    }                                })                                .setOnPickResult(new IPickResult() {                                    @Override                                    public void onPickResult(PickResult r) {                                        //TODO: do what you have to...                                        if (r.getBitmap() != null) {                                            img_promotional_item.setImageBitmap(r.getBitmap());                                            try {                                                progressDialog.show();                                                base64 = Utils.convertImageToBase64(r.getBitmap());                                                progressDialog.dismiss();                                            } catch (Exception ex) {                                                progressDialog.dismiss();                                            }                                        }                                    }                                }).show(PatientListActivityNew.this);*/                        break;                    case DialogInterface.BUTTON_NEGATIVE:                        //No button clicked                        break;                }            }        };        android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(this);        builder.setMessage("I acknowledged that I fully HIPAA compliant to upload picture here.").setPositiveButton("Yes", dialogClickListener)                .setNegativeButton("No", dialogClickListener).show();    }    private void showAlertDialog(String message, String title) {        dialogSHowAlert = new Dialog(context);//, android.R.style.Theme_Translucent_NoTitleBar_Fullscreen);        mDialogShowAlertBinding = DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.dialog_show_download_file_alert, null, false);        dialogSHowAlert.setContentView(mDialogShowAlertBinding.getRoot());//                            dialogDiscontinue.getWindow().getAttributes().windowAnimations = R.style.DialogAnimation_2;        dialogSHowAlert.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));        dialogSHowAlert.getWindow().setStatusBarColor(context.getResources().getColor(R.color.white));        dialogSHowAlert.setCancelable(false);        dialogSHowAlert.setCanceledOnTouchOutside(false);        mDialogShowAlertBinding.tvTitle.setText(title);        mDialogShowAlertBinding.tvMessage.setText(message);//        mDialogShowAlertBinding.imgalert.setVisibility(View.GONE);        mDialogShowAlertBinding.tvTitle.setVisibility(View.VISIBLE);        mDialogShowAlertBinding.canleBtn.setOnClickListener(v -> {            dialogSHowAlert.dismiss();            dialogSHowAlert = null;        });        mDialogShowAlertBinding.okBtn.setOnClickListener(v -> {            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);            Uri uri = Uri.parse( Environment.getExternalStorageDirectory()                    + File.separator + Environment.DIRECTORY_DOWNLOADS                    + File.separator + this.getResources().getString(R.string.app_name));            intent.setDataAndType(uri, "*/*");            startActivity(Intent.createChooser(intent, "Open folder"));//            String path = Environment.getExternalStorageDirectory() + "/" + "Downloads" + "/";           /* String path = Environment.getExternalStorageDirectory()                    + File.separator + Environment.DIRECTORY_DOWNLOADS                    + File.separator + this.getResources().getString(R.string.app_name);            Uri uri = Uri.parse(path);            Intent intent = new Intent(Intent.ACTION_PICK);            intent.setDataAndType(uri, "");            startActivity(intent);*/            dialogSHowAlert.dismiss();            dialogSHowAlert = null;        });        dialogSHowAlert.show();    }}